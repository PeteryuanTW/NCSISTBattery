@page "/"
@using System.Drawing
@inject ShopfloorService shopfloorService
@rendermode InteractiveServer
@implements IDisposable

<DxLoadingPanel @bind-Visible="isCalculating"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Calculating Data...">
    <DxGridLayout>
        <Rows>
            <DxGridLayoutRow Height="1fr" />
            <DxGridLayoutRow Height="11fr" />
        </Rows>
        <Columns>
            <DxGridLayoutColumn Width="6fr" />
            <DxGridLayoutColumn Width="6fr" />
        </Columns>
        <Items>
            <DxGridLayoutItem Row="0" Column="0" ColumnSpan="2">
                <Template>
                    <DxToolbar Title="@($"當前配方: {CurrentRecipe?.Name}")" SizeMode="SizeMode.Large">
                        <Items>
                            <DxToolbarItem BeginGroup="true" Tooltip="切換配方" Click="@ShowRecipeSelectPopup" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="oi oi-loop-circular" />
                            <DxToolbarItem BeginGroup="true" Tooltip="模擬預算" Click="@StartCalculating" RenderStyle="ButtonRenderStyle.Warning" IconCssClass="oi oi-calculator" />
                        </Items>
                    </DxToolbar>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="1" Column="0" Visible="@s">
                <Template>
                    <DxCarousel Width="100%"
                                AllowPagingByClick="false"
                                LoopNavigationEnabled="true"
                                SlideShowEnabled="true"
                                NavButtonsDisplayMode="CarouselControlsDisplayMode.VisibleOnHover"
                                PagerDisplayMode="CarouselControlsDisplayMode.VisibleOnHover"
                                PauseSlideShowOnHover="true">
                        <Items>
                            @foreach (var area in workAreaWrapperClass)
                            {
                                <DxCarouselItem>
                                    <div class="demo-carousel-content">
                                        <DxChart @ref="@dxChart" T="Jig"
                                                 Data="@(allJigs.Where(x=>x.AreaCode == area.Index))"
                                                 Width="100%"
                                                 Height="100%">
                                            <DxChartTitle Text="@($"{NCSISTBatteryEnumHelper.GetWorkAreaChinese(area.Index.ToString())}疊片數量")" />
                                            <DxChartBarSeries T="Jig"
                                                              TArgument="string"
                                                              TValue="int"
                                                              ArgumentField="@(x=>x.Name)"
                                                              ValueField="@(x=>x.JigContent.Count())" />
                                            <DxChartTooltip Enabled="true"
                                                            Position="RelativePosition.Outside">
                                                <div style="margin: 0.75rem">
                                                    <div class="fw-bold">@context.Point.Argument</div>
                                                    <div> @($"數量: {context.Point.Value} 片")</div>
                                                </div>
                                            </DxChartTooltip>
                                            <DxChartLegend Visible="false"></DxChartLegend>
                                        </DxChart>
                                    </div>
                                </DxCarouselItem>
                            }
                        </Items>
                    </DxCarousel>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="1" Column="1">
                <Template>
                    <StationSummuryDonut />
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</DxLoadingPanel>

<DxPopup @ref="@recipePopup" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@currentRecipeModel" Context="EditFormContext" OnValidSubmit="ChangeCurrentRecipe">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="配方選擇" ColSpanLg="12" BeginRow="true">
                    <DxComboBox Data="@recipes" @bind-Value="@currentRecipeModel.RecipeId" TextFieldName="@nameof(Recipe.Name)" ValueFieldName="@nameof(Recipe.Id)" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @ref="@CalculationResultPopup" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <BodyContentTemplate Context="bodycontext">
        <DxFormLayout>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="耗時" ColSpanLg="6" BeginRow="true">
                <DxTextBox></DxTextBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="其他數值" ColSpanLg="6" BeginRow="true">
                <DxTextBox></DxTextBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="其他數值" ColSpanLg="6" BeginRow="true">
                <DxTextBox></DxTextBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="其他數值" ColSpanLg="6" BeginRow="true">
                <DxTextBox></DxTextBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="其他數值" ColSpanLg="6" BeginRow="true">
                <DxTextBox></DxTextBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanLg="12">
                <hr />
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                <DxToolbar>
                    <Items>
                        <DxToolbarItem IconCssClass="oi oi-media-play" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                    </Items>
                </DxToolbar>
            </DxFormLayoutItem>
        </DxFormLayout>
    </BodyContentTemplate>
</DxPopup>

@code {
    private DxChart? dxChart { get; set; }
    private List<Jig> allJigs = new();

    private IEnumerable<WorkAreaWrapperClass> workAreaWrapperClass = NCSISTBatteryEnumHelper.GetWorkAreaWrapperClasses();

    private List<Station> stations = new();

    private Recipe? CurrentRecipe;
    private CurrentRecipeModel currentRecipeModel = new();

    private bool s = true;

    private DxPopup? recipePopup { get; set; }
    private async Task ShowRecipeSelectPopup()
    {
        currentRecipeModel = new CurrentRecipeModel
        {
            RecipeId = CurrentRecipe?.Id,
        };
        await recipePopup?.ShowAsync();
    }
    private async Task CloseRecipeSelectPopup()
    {
        await UpdateCurrentRecipe();
        await recipePopup?.CloseAsync();
    }

    private bool chartReady = false;
    private DxPopup? CalculationResultPopup { get; set; }
    private async Task ShowCalculationPopup() => await CalculationResultPopup?.ShowAsync();
    private async Task CloseCalculationPopup() => await CalculationResultPopup?.CloseAsync();

    private bool isCalculating = false;

    private List<Recipe> recipes = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateJigs();
        await GetRecipe();
        await UpdateCurrentRecipe();
        await UpdateStations();
        dataService.JigChangedFunc += UpdateJigs;
    }

    void IDisposable.Dispose()
    {
        dataService.JigChangedFunc -= UpdateJigs;
    }

    private async Task UpdateJigs()
    {
        allJigs = await dataService.GetAllJigsWithContent();
        if (dxChart is null)
            return;
        dxChart?.RefreshData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateStations()
    {
        stations = shopfloorService.Stations;
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetRecipe()
    {
        recipes = await dataService.GetAllRecipes();

    }

    private async Task UpdateCurrentRecipe()
    {
        CurrentRecipe = await dataService.GetCurrentRecipe();
    }

    private async Task ChangeCurrentRecipe()
    {
        var res = await dataService.SetCurrentRecipe(currentRecipeModel.RecipeId);
        await CloseRecipeSelectPopup();
        notificationService.ShowToast(res);
    }

    private async Task StartCalculating()
    {
        isCalculating = true;
        await dataService.PostCalculationDataDTO();
        isCalculating = false;
        await ShowCalculationPopup();
    }




    #region charts

    #endregion
}