@page "/JigsDashboard/{JigAreaCode}"
@rendermode InteractiveServer

@inject DataService dataService
@inject NotificationService notificationService


<DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    <Rows>
        @for (int i = 0; i < 12; i++)
        {
            <DxGridLayoutRow />
        }
    </Rows>
    <Columns>
        @for (int i = 0; i < 12; i++)
        {
            <DxGridLayoutColumn />
        }
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" RowSpan="12" Column="0" ColumnSpan="12">
            <Template>
                <DxToolbar SizeMode="SizeMode.Large">
                    <Items>
                        <DxToolbarItem Text="@($"區域: {NCSISTBatteryEnumHelper.GetWorkAreaChinese(JigAreaCode)}")" Enabled="false" RenderStyleMode="ToolbarItemRenderStyleMode.Plain" BeginGroup="true"></DxToolbarItem>
                        <DxToolbarItem Text="@($"選擇治具: {targetJig?.Name}")" RenderStyleMode="ToolbarItemRenderStyleMode.Plain" Enabled="false" BeginGroup="true"></DxToolbarItem>
                        <DxToolbarItem Id="dataimport" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="oi oi-cloud-upload" Enabled="@hasTargetJig" BeginGroup="true"></DxToolbarItem>
                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Info" IconCssClass="bi bi-info-lg" Enabled="@hasTargetJig" Click="InfoClick" BeginGroup="true"></DxToolbarItem>
                    </Items>
                </DxToolbar>
            </Template>
        </DxGridLayoutItem>
        @foreach (var jig in jigs)
        {
            <DxGridLayoutItem Row="@jig.Row" RowSpan="@jig.RowSpan" Column="@jig.ColumnIndex" ColumnSpan="@jig.ColumnSpan">
                <Template>
                    <JigComponemt JigParameter="@jig" IsSelected="@(JigSelected(jig.Id))" SelectClickCB="SelectClick"></JigComponemt>
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

<DxFileInput ExternalSelectButtonCssSelector="#dataimport"
             MaxFileSize="15000000" FilesUploading="FileUpload" AllowMultiFileUpload="false">
</DxFileInput>

<DxPopup @ref="@infoPopup" Width="auto" CloseOnOutsideClick="false">
    <BodyContentTemplate Context="bodycontext">
        <DxGrid @ref="@grid" Data="@targetJig?.JigContent"
                CustomizeEditModel="Grid_CustomizeEditModel" EditMode="GridEditMode.EditRow" EditNewRowPosition="GridEditNewRowPosition.Top"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeElement="Grid_CustomizeElement">
            <ToolbarTemplate>
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                    <Items>
                        <DxToolbarItem Text="@($"數量: {targetJig?.JigContent.Count}")" RenderStyleMode="ToolbarItemRenderStyleMode.Plain" Enabled="false" BeginGroup="true"></DxToolbarItem>
                        <DxToolbarItem Tooltip="手動輸入" BeginGroup="true" Click="StartEditNewJigContent" IconCssClass="bi bi-align-top" Alignment="ToolbarItemAlignment.Left" />
                    </Items>
                </DxToolbar>
            </ToolbarTemplate>
            <Columns>
                <DxGridCommandColumn DeleteButtonVisible="false">
                    <HeaderTemplate>
                        <div>編輯</div>
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        <DxButton IconCssClass="oi oi-pencil" CssClass="m-1" RenderStyle="ButtonRenderStyle.Info"
                                  Click="async () => grid?.StartEditRowAsync(context.VisibleIndex)" />
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
                <DxGridDataColumn FieldName="@nameof(JigContent.Name)" />
                <DxGridDataColumn FieldName="@nameof(JigContent.MaterialCode)">
                    <CellEditTemplate>
                        @{
                            var jigContent = (JigContent)context.EditModel;
                        }
                        <DxComboBox Data="@(GetMaterialsWithFilter())"
                                    @bind-Value="@jigContent.MaterialCode"
                                    TextFieldName="@nameof(Material.Name)"
                                    ValueFieldName="@nameof(Material.TypeCode)">
                        </DxComboBox>
                    </CellEditTemplate>
                    <CellDisplayTemplate>
                        @{
                            var jigContent = (JigContent)context.DataItem;
                        }
                        <div>@(GetNameFromMaterialCode(jigContent.MaterialCode))</div>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(JigContent.Heat)" />
                <DxGridDataColumn FieldName="@nameof(JigContent.Thickness)" />
                <DxGridDataColumn FieldName="@nameof(JigContent.PushToStartTime)" DisplayFormat="G" />
                <DxGridDataColumn FieldName="@nameof(JigContent.StartJigId)"/>
                <DxGridCommandColumn EditButtonVisible="false" SaveButtonVisible="false" CancelButtonVisible="false">
                    <HeaderTemplate>
                        <div>刪除</div>
                    </HeaderTemplate>
                    <CellDisplayTemplate>
                        <DxButton IconCssClass="oi oi-trash" CssClass="m-1" RenderStyle="ButtonRenderStyle.Danger"
                                  Click="async () => grid?.ShowRowDeleteConfirmation(context.VisibleIndex)" />
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
            </Columns>
        </DxGrid>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @ref="@uploadPopup" Width="50rem">
    <BodyContentTemplate Context="bodycontext">
        <DxFormLayout>
            <DxFormLayoutItem ColSpanLg="12">
                <DxGrid Data="@jigContentsFromFile">
                    <Columns>
                        <DxGridDataColumn FieldName="@nameof(JigContent.Name)"></DxGridDataColumn>
                        <DxGridDataColumn FieldName="@nameof(JigContent.MaterialCode)"></DxGridDataColumn>
                        <DxGridDataColumn FieldName="@nameof(JigContent.Heat)"></DxGridDataColumn>
                        <DxGridDataColumn FieldName="@nameof(JigContent.Thickness)"></DxGridDataColumn>
                        <DxGridDataColumn FieldName="@nameof(JigContent.PushToStartTime)" DisplayFormat="G"></DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanLg="12">
                <hr />
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                <DxToolbar>
                    <Items>
                        <DxToolbarItem Click="UpsertJigContent" IconCssClass="oi oi-check" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                    </Items>
                </DxToolbar>
            </DxFormLayoutItem>
        </DxFormLayout>

    </BodyContentTemplate>
</DxPopup>

@code {
    [Parameter]
    public string JigAreaCode { get; set; } = null!;

    private IEnumerable<Material> materials = new List<Material>();

    private List<Jig> jigs = new List<Jig>();
    private Jig? targetJig;
    private bool hasTargetJig => targetJig is not null;

    private List<JigContent> jigContentsFromFile = new();
    private DxPopup? infoPopup { get; set; }
    private async Task ShowInfoPopup()
    {
        await infoPopup?.ShowAsync();
    }
    private async Task CloseInfoPopup()
    {
        await infoPopup?.CloseAsync();
    }

    private DxPopup? uploadPopup { get; set; }
    private async Task ShowUploadPopup()
    {
        await uploadPopup?.ShowAsync();
    }
    private async Task CloseUploadPopup()
    {
        await uploadPopup?.CloseAsync();
    }


    private IGrid? grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        materials = await dataService.GetAllMaterials();
        await UpdateJigAndContent();

        dataService.JigChangedFunc += UpdateJigAndContent;
    }

    #region ui
    private void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow && (bool)e.Grid.GetRowValue(e.VisibleIndex, "ImportOrType"))
        {
            e.CssClass = "bg-warning-subtle";
        }
    }

    private string GetNameFromMaterialCode(int i)
    {
        if (i == 0)
            return "通用";
        var m = materials.FirstOrDefault(x => x.TypeCode == i);
        return m is not null ? m.Name : "未定義";

    }

    private IEnumerable<Material> GetMaterialsWithFilter()
    {
        if (!hasTargetJig)
        {
            return new List<Material>();
        }
        else
        {
            return targetJig.MaterialFree ? materials : materials.Where(x => x.TypeCode == targetJig.MaterialTypeCode);
        }
    }

    #endregion
    private async Task UpdateJigAndContent()
    {
        jigs = await dataService.GetJigsByArea(JigAreaCode);
        if (hasTargetJig)
        {
            targetJig = jigs.FirstOrDefault(x => x.Id == targetJig.Id);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SelectClick(Guid jigId)
    {
        targetJig = jigs.FirstOrDefault(x => x.Id == jigId);
    }

    private async Task InfoClick()
    {
        await ShowInfoPopup();
    }

    private bool JigSelected(Guid id)
    {
        if (!hasTargetJig)
        {
            return false;
        }
        else
        {
            return id == targetJig.Id;
        }
    }

    private async Task FileUpload(FilesUploadingEventArgs args)
    {
        try
        {
            jigContentsFromFile = await dataService.GetJigContentFromFile(args.Files);
            await ShowUploadPopup();
        }
        catch (Exception ex)
        {
            notificationService.ShowToast(new RequestResult(4, ex.Message));
        }

    }


    private async Task StartEditNewJigContent()
    {
        await grid?.StartEditNewRowAsync();
    }

    private void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.EditModel is JigContent jigContent)
        {
            if (e.IsNew)
            {
                jigContent.Name = DateTime.Now.ToString("yyyyMMddHHmmss");
                jigContent.InitContentToJig(targetJig);
                jigContent.ImportOrType = true;
            }
        }
    }

    private async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.EditModel is JigContent jigContent)
        {
            await dataService.UpsertJigContent(jigContent);
        }
    }

    private async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        if (e.DataItem is JigContent jigContent)
        {
            var result = await dataService.RemoveJigContentBeforeStart(jigContent);
            notificationService.ShowToast(result);
        }
    }

    private async Task UpsertJigContent()
    {
        if (targetJig is null || jigContentsFromFile.Count == 0)
        {
            notificationService.ShowToast(new RequestResult(4, "請選擇治具或上傳內容"));
            return;
        }
        var result = await dataService.UpdateJigContentToJigFromExcel(targetJig, jigContentsFromFile);
        await CloseUploadPopup();
        notificationService.ShowToast(result);

    }
}
